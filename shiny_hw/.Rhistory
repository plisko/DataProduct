ils <- grep("^IL", names(training))
preProc <- preProcess(training[ils], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[ils])
modelFit <- train(training$diagnosis ~ ., method = "glm", data=trainPC)
trainPC <- predict(preProc, testing[ils])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ils <- grep("^IL", names(training))
# with PCA
preProc <- preProcess(training[ils], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[ils])
modelFit <- train(training$diagnosis ~ ., method = "glm", data=trainPC)
testPC <- predict(preProc, testing[ils])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
modelFit2 <- train(diagnosis ~ ., method = "glm", data=training)
confusionMatrix(testing$diagnosis, predict(modelFit2, testing))
modelFit2 <- train(diagnosis ~ ., method = "glm", data=training)
modelFit2 <- train(diagnosis ~ ., method = "glm", data=training[ils])
modelFit2 <- train(diagnosis ~ ., method = "glm", data=training[c(1,ils)])
confusionMatrix(testing$diagnosis, predict(modelFit, testing[c(1,ils)]))
confusionMatrix(testing[c(1,ils)]$diagnosis, predict(modelFit, testing[c(1,ils)]))
confusionMatrix(testing[c(1,ils)]$diagnosis, predict(modelFit, testing[c(1,ils)]))
confusionMatrix(testing[c(1,ils)]$diagnosis, predict(modelFit2, testing[c(1,ils)]))
preProc <- preProcess(training[ils], method = "pca", thresh = 0.8)
trainPC <- predict(preProc, training[ils])
modelFit <- train(training$diagnosis ~ ., method = "glm", data=trainPC)
testPC <- predict(preProc, testing[ils])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qqplot(,training)
qqplot(,training$CompressiveStrength)
qqplot(,training$CompressiveStrength, col=training$Age)
qqplot(inTrain,training$CompressiveStrength, col=training$Age)
qplot(inTrain,training$CompressiveStrength, col=training$Age)
qplot(,training$CompressiveStrength, col=training$Age)
qplot(,training$CompressiveStrength, col=cut2(training$Age)
library(Hmisc)
qplot(,training$CompressiveStrength, col=cut2(training$Age))
qplot(,training$CompressiveStrength, col=cut2(training$Age))
qplot(,training$CompressiveStrength, col=cut2(training$FlyAsh))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1)
hist(training$Superplasticizer)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ils <- grep("^IL", names(training))
preProc <- preProcess(training[ils], method = "pca", thresh = 0.8)
preProc
preProcess(training[ils], method = "pca", thresh = 0.9)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
createDataPartition(y = Case, p= 0.7, list = FALSE, data = segmentationOriginal)
createDataPartition(y = segmentationOriginal$Case, p= 0.7, list = FALSE)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p= 0.7, list = FALSE)
# solution
inTrain <- createDataPartition(y = segmentationOriginal$Case, p= 0.7, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
train(Cart ~ ., method="rpart", data=segmentationOriginal)
names(segmentationOriginal)
segmentationOriginal$Case
training$Case
subset(segmentationOriginal, segmentationOriginal$Case == "Train")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, segmentationOriginal$Case == "Train")
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
set.seed(125)
summary(training)
training <- subset(segmentationOriginal, segmentationOriginal$Case == "Train")
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=segmentationOriginal)
k <- data.frame(test[1:4, ]);
k <- data.frame(testing[1:4, ]);
k[1:4, ] <- rep(NA, ncol(k))
k$TotalIntenCh2  <- c(23000,50000,57000,NA);
k$FiberWidthCh1 <-c(10, 10, 8, 8);
k$PerimStatusCh1 <-c(2, NA, NA, 2);
k$VarIntenCh4 <-c(NA, 100, 100, 100);
k
predict(modFit, newdata = k, na.action = na.pass)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, segmentationOriginal$Case == "Train")
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, segmentationOriginal$Case == "Train")
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
k <- data.frame(testing[1:4, ]);
k[1:4, ] <- rep(NA, ncol(k))
k$TotalIntenCh2  <- c(23000,50000,57000,NA);
k$FiberWidthCh1 <-c(10, 10, 8, 8);
k$PerimStatusCh1 <-c(2, NA, NA, 2);
k$VarIntenCh4 <-c(NA, 100, 100, 100);
predict(modFit, newdata = k, na.action = na.pass)
predict(modFit, newdata = k)
k <- data.frame(testing[,c("TotalIntench2")]);
k <- data.frame(testing[c("TotalIntench2")]);
testing["TotalIntench2"]
testing[,"TotalIntench2"]
testing$TotalIntenCh2
testing["TotalIntenCh2"]
testing[c("TotalIntenCh2")]
testing[c("TotalIntenCh2","FiberWidthCh1"),1]
testing[c("TotalIntenCh2","FiberWidthCh1"),]
testing[c("TotalIntenCh2","FiberWidthCh1"),1:2]
testing[c("TotalIntenCh2","FiberWidthCh1","PerimStatusCh1"),]
testing[c("TotalIntenCh2","FiberWidthCh1","PerimStatusCh1")]
testing[,c("TotalIntenCh2","FiberWidthCh1","PerimStatusCh1")]
testing[1,c("TotalIntenCh2","FiberWidthCh1","PerimStatusCh1")]
k <- testing[1,c("TotalIntenCh2","FiberWidthCh1","PerimStatusCh1")]
k$TotalIntenCh2  <- 23000;
k$TotalIntenCh2  <- 23000
k$FiberWidthCh1 <-10
k$PerimStatusCh1 <-2
predict(modFit, newdata = k)
k <- data.frame(testing[1:4, ]);
k[1:4, ] <- rep(NA, ncol(k))
k$TotalIntenCh2  <- c(23000,50000,57000,NA);
k$FiberWidthCh1 <-c(10, 10, 8, 8);
k$PerimStatusCh1 <-c(2, NA, NA, 2);
k$VarIntenCh4 <-c(NA, 100, 100, 100);
predict(modFit$finalModel, newdata=k)
k <- data.frame(testing[1:4, ]);
k[1:4, ] <- rep(NA, ncol(k))
k$TotalIntenCh2  <- c(23000,50000,57000,NA);
k$FiberWidthCh1 <-c(10, 10, 8, 8);
k$PerimStatusCh1 <-c(2, NA, NA, 2);
k$VarIntenCh4 <-c(NA, 100, 100, 100);
predict(modFit$finalModel, newdata=k)
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
k <- data.frame(testing[1:4, ]);
k[1:4, ] <- rep(NA, ncol(k))
k$TotalIntenCh2  <- c(23000,50000,57000,NA);
k$FiberWidthCh1 <-c(10, 10, 8, 8);
k$PerimStatusCh1 <-c(2, NA, NA, 2);
k$VarIntenCh4 <-c(NA, 100, 100, 100);
predict(modFit$finalModel, newdata=k)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
# solution
training <- subset(segmentationOriginal, segmentationOriginal$Case == "Train")
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
k <- data.frame(testing[1:4, ]);
k[1:4, ] <- rep(NA, ncol(k))
k$TotalIntenCh2  <- c(23000,50000,57000,NA);
k$FiberWidthCh1 <-c(10, 10, 8, 8);
k$PerimStatusCh1 <-c(2, NA, NA, 2);
k$VarIntenCh4 <-c(NA, 100, 100, 100);
predict(modFit$finalModel, newdata=k)
predict(modFit, newdata=k)
predict(modFit, newdata=k, na.action = na.pass)
predict(modFit$finalModel, newdata=k, na.action = na.pass)
library(rattle)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart")
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
k <- data.frame(testing[1:4, ]);
k[1:4, ] <- rep(NA, ncol(k))
k$TotalIntenCh2  <- c(23000,50000,57000,NA);
k$FiberWidthCh1 <-c(10, 10, 8, 8);
k$PerimStatusCh1 <-c(2, NA, NA, 2);
k$VarIntenCh4 <-c(NA, 100, 100, 100);
predict(fit, newdata=k)
predict(modFit, newdata=k)
predict(modFit, newdata=k, na.action = na.pass)
p <- predict(modFit, newdata=k, na.action = na.pass)
p
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=oliva)
modFit <- train(Area ~ ., method="rpart", data=olive)
olive
olive$Area
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
dim(olive)
modFit <- train(olive$Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(olive$Area ~ ., method="rpart")
modFit <- train(olive$Area ~ ., method="rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
predict(modFit, newdata=newdata)
predict(modFit$finalModel, newdata=newdata)
predict(modFit, newdata=newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
head(train)
art Disease (chd) as the outcome and age at onset, current alcohol consumption, obesity levels, cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol as predictor
head(train)
head(SAheart)
trainSA()
head(trainSA)
train(chd ~ age + alcohol, data = trainSA, method = "glm", family = "binomial")
?SAheart
train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, , data = trainSA, method = "glm", family = "binomial")
train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, , data = trainSA, method = "glm", family = "binomial")
train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, predict(modFit, trainSA))
predict(modFit, trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
predict(modFit, trainSA)
missClass(trainSA$chd, predict(modFit, trainSA))
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modFit, testSA))
missClass(trainSA$chd, predict(modFit, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.test$y <- as.factor(vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
train(y ~ ., data = vowel.train, method = "rf")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
?varImp
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE)
varImpPlot(modFit)
varImpPlot(modFit$finalModel)
varImp(modFit$finalModel)
order(varImp(modFit$finalModel))
order(varImp(modFit$finalModel), decreasing = FALSE)
sort(varImp(modFit$finalModel), decreasing = FALSE)
sort(varImp(modFit$finalModel))
order(varImp(modFit$finalModel))
importance <- varImp(modFit$finalModel)
importance[order(importance)]
importance[order(importance),]
importance[order(importance, decreasing = FALSE),]
varImp(modFit$finalModel)
varImp(modFit$finalModel)
varImpPlot(modFit$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#solution
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE, importance = FALSE)
varImp(modFit$finalModel)
varImpPlot(modFit$finalModel)
varImp(modFit$finalModel)
?varImp
set.seed(83833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox = TRUE, importance = FALSE)
varImpPlot(modFit$finalModel)
randomForest(vowel.train)
a <- randomForest(vowel.train)
varImp(a)
varImpPlot(a)
a <- randomForest(y ~ . , data = vowel.train)
varImp(a)
varImpPlot(a)
set.seed(33833)
a <- randomForest(y ~ . , data = vowel.train)
varImp(a)
varImpPlot(a)
library(ElemStatLearn)
data(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#solution
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modRF <- randomForest(y ~ . , data = vowel.train)
varImpPlot(modRF)
varImp(modRF)
install.packages(c("aplpack", "boot", "DBI", "httpuv", "jsonlite", "KernSmooth", "knitr", "MASS", "mime", "minqa", "nlme", "quantmod", "Rcpp", "rmarkdown"))
q()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
?manipulate
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
cars <- mtcars
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
colnames(cars)
cars <- data.frame(dist = c(1,2))
cars
cars <- data.frame(dist = c(1,2), speed = c(9, 21))
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
library(manipulate)
cars <- data.frame(dist = c(1,2), speed = c(9, 21))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
# solution
manipulate(myPlot, s = slider(0, 2, step = 0.1))
abline(0, 1)
abline(0, 2)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
cars <- data.frame(dist = c(1,2), speed = c(0.9, 2.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
cars <- data.frame(dist = c(1,2,3), speed = c(0.9,2.1,3.0))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages('rCharts')
require(rCharts)
install.packages('devtools')
install.packages('rCharts')
install_github('rCharts', 'ramnathv')
require(devtools)
install_github('rCharts', 'ramnathv')
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
dTable(airquality, sPaginationType = "full_numbers")
install.packages('shiny')
library(shiny)
library(shiny)
install.packages('shiny')
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
install_github('slidify', 'ramnathv')
require(devtools)
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
library(slidify)
shiny::runApp('Documents/Coursera/09_DataProducts/hw/shiny_hw')
shiny::runApp('Documents/Coursera/09_DataProducts/hw/shiny_hw')
data(galton)
library(UsingR)
data(galton)
setwd("Documents/Coursera/09_DataProducts/hw/shiny_hw/")
head(galton)
write.table(galton,file = "galton.csv", sep = "\t")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data(mtcars)
write.table(galton,file = "mtcars.csv", sep = ";")
shiny::runApp()
write.table(mtcars,file = "mtcars.csv", sep = ";")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
clear()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
